#!/bin/sh
#Create image by updating he latest code from git and push it to ECR
#It uses Dockerfile provided in github repository, must be on root of repository
echo Logging in to Amazon ECR...
$(aws ecr get-login-password --no-include-email --region us-east-1)
REPOSITORY_URI=033484327401.dkr.ecr.us-east-1.amazonaws.com/webapp
IMAGE_TAG=latest
echo Build started on `date`
echo Building the Docker image...
docker build -t $REPOSITORY_URI:$IMAGE_TAG .
docker tag $REPOSITORY_URI:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG
echo Build completed on `date`
echo Pushing the Docker images...
docker push $REPOSITORY_URI:latest
docker push $REPOSITORY_URI:$IMAGE_TAG

#creates a new task definition from the previous definition details
TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "Cyberdude-app" --region "us-east-1")
NEW_TASK_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$REPOSITORY_URI:$IMAGE_TAG" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
NEW_TASK_INFO=$(aws ecs register-task-definition --region "us-east-1" --cli-input-json "$NEW_TASK_DEFINTIION")
NEW_REVISION=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')

ARN=$(echo $NEW_TASK_INFO | jq -r '.taskDefinition.taskDefinitionArn')
jq --arg arn "$ARN" '.Resources[0].TargetService.Properties.TaskDefinition = $arn' /scripts/appspec.json | sponge /scripts/appspec.json
aws s3 cp /scripts/appspec.json s3://nayan1992-build/webapp/appspec.json

#Create Deployment using AWS Code Deploy
aws deploy create-deployment --cli-input-json file:///scripts/codedeploy.json --region us-east-1